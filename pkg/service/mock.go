// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/service.go

// Package mock_service is a generated GoMock package.
package service

import (
	authentication "github.com/gemsorg/eligibility/pkg/authentication"
	filter "github.com/gemsorg/eligibility/pkg/filter"
	workerprofile "github.com/gemsorg/eligibility/pkg/workerprofile"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEligibilityService is a mock of EligibilityService interface
type MockEligibilityService struct {
	ctrl     *gomock.Controller
	recorder *MockEligibilityServiceMockRecorder
}

// MockEligibilityServiceMockRecorder is the mock recorder for MockEligibilityService
type MockEligibilityServiceMockRecorder struct {
	mock *MockEligibilityService
}

// NewMockEligibilityService creates a new mock instance
func NewMockEligibilityService(ctrl *gomock.Controller) *MockEligibilityService {
	mock := &MockEligibilityService{ctrl: ctrl}
	mock.recorder = &MockEligibilityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEligibilityService) EXPECT() *MockEligibilityServiceMockRecorder {
	return m.recorder
}

// Healthy mocks base method
func (m *MockEligibilityService) Healthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy
func (mr *MockEligibilityServiceMockRecorder) Healthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockEligibilityService)(nil).Healthy))
}

// GetFilters mocks base method
func (m *MockEligibilityService) GetFilters() (filter.Filters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilters")
	ret0, _ := ret[0].(filter.Filters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilters indicates an expected call of GetFilters
func (mr *MockEligibilityServiceMockRecorder) GetFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilters", reflect.TypeOf((*MockEligibilityService)(nil).GetFilters))
}

// CreateFilter mocks base method
func (m *MockEligibilityService) CreateFilter(arg0 filter.Filter) (filter.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilter", arg0)
	ret0, _ := ret[0].(filter.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilter indicates an expected call of CreateFilter
func (mr *MockEligibilityServiceMockRecorder) CreateFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilter", reflect.TypeOf((*MockEligibilityService)(nil).CreateFilter), arg0)
}

// GetWorkerProfile mocks base method
func (m *MockEligibilityService) GetWorkerProfile(workerID string) (workerprofile.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerProfile", workerID)
	ret0, _ := ret[0].(workerprofile.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerProfile indicates an expected call of GetWorkerProfile
func (mr *MockEligibilityServiceMockRecorder) GetWorkerProfile(workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerProfile", reflect.TypeOf((*MockEligibilityService)(nil).GetWorkerProfile), workerID)
}

// CreateWorkerProfile mocks base method
func (m *MockEligibilityService) CreateWorkerProfile(arg0 workerprofile.NewProfile) (workerprofile.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerProfile", arg0)
	ret0, _ := ret[0].(workerprofile.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerProfile indicates an expected call of CreateWorkerProfile
func (mr *MockEligibilityServiceMockRecorder) CreateWorkerProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerProfile", reflect.TypeOf((*MockEligibilityService)(nil).CreateWorkerProfile), arg0)
}

// SetAuthData mocks base method
func (m *MockEligibilityService) SetAuthData(data authentication.AuthData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthData", data)
}

// SetAuthData indicates an expected call of SetAuthData
func (mr *MockEligibilityServiceMockRecorder) SetAuthData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthData", reflect.TypeOf((*MockEligibilityService)(nil).SetAuthData), data)
}
